// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var $$String = require("bs-platform/lib/js/string.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var ReasonApollo = require("reason-apollo/src/ReasonApollo.bs.js");

function str(prim) {
  return prim;
}

var ppx_printed_query = "query GetTracks($limit: Int)  {\ntracks(limit: $limit)  {\nid  \nname  \nurl  \ncoverArt  \n}\n\n}\n";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_primitive.valFromOption(match)["tracks"];
    var tmp;
    if (match$1 !== undefined) {
      var match$2 = Js_json.decodeNull(match$1);
      if (match$2 !== undefined) {
        tmp = undefined;
      } else {
        var match$3 = Js_json.decodeArray(match$1);
        tmp = match$3 !== undefined ? match$3.map((function (value) {
                  var match = Js_json.decodeNull(value);
                  if (match !== undefined) {
                    return undefined;
                  } else {
                    var match$1 = Js_json.decodeObject(value);
                    var tmp;
                    if (match$1 !== undefined) {
                      var value$1 = Js_primitive.valFromOption(match$1);
                      var match$2 = value$1["id"];
                      var tmp$1;
                      if (match$2 !== undefined) {
                        var match$3 = Js_json.decodeNull(match$2);
                        if (match$3 !== undefined) {
                          tmp$1 = undefined;
                        } else {
                          var match$4 = Js_json.decodeString(match$2);
                          tmp$1 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(match$2));
                        }
                      } else {
                        tmp$1 = undefined;
                      }
                      var match$5 = value$1["name"];
                      var tmp$2;
                      if (match$5 !== undefined) {
                        var match$6 = Js_json.decodeNull(match$5);
                        if (match$6 !== undefined) {
                          tmp$2 = undefined;
                        } else {
                          var match$7 = Js_json.decodeString(match$5);
                          tmp$2 = match$7 !== undefined ? match$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(match$5));
                        }
                      } else {
                        tmp$2 = undefined;
                      }
                      var match$8 = value$1["url"];
                      var tmp$3;
                      if (match$8 !== undefined) {
                        var match$9 = Js_json.decodeNull(match$8);
                        if (match$9 !== undefined) {
                          tmp$3 = undefined;
                        } else {
                          var match$10 = Js_json.decodeString(match$8);
                          tmp$3 = match$10 !== undefined ? match$10 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(match$8));
                        }
                      } else {
                        tmp$3 = undefined;
                      }
                      var match$11 = value$1["coverArt"];
                      var tmp$4;
                      if (match$11 !== undefined) {
                        var match$12 = Js_json.decodeNull(match$11);
                        if (match$12 !== undefined) {
                          tmp$4 = undefined;
                        } else {
                          var match$13 = Js_json.decodeString(match$11);
                          tmp$4 = match$13 !== undefined ? match$13 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(match$11));
                        }
                      } else {
                        tmp$4 = undefined;
                      }
                      tmp = {
                        id: tmp$1,
                        name: tmp$2,
                        url: tmp$3,
                        coverArt: tmp$4
                      };
                    } else {
                      tmp = Js_exn.raiseError("graphql_ppx: Object is not a value");
                    }
                    return Js_primitive.some(tmp);
                  }
                })) : Js_exn.raiseError("graphql_ppx: Expected array, got " + JSON.stringify(match$1));
      }
    } else {
      tmp = undefined;
    }
    return {
            tracks: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make(limit, _) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                  "limit",
                  limit !== undefined ? limit : null
                ]]),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var limit = variables.limit;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                  "limit",
                  limit !== undefined ? limit : null
                ]]),
          parse: parse
        };
}

function ret_type() {
  return /* module */[];
}

var MT_Ret = /* module */[];

var GetTracks = /* module */[
  /* ppx_printed_query */ppx_printed_query,
  /* query */ppx_printed_query,
  /* parse */parse,
  /* make */make,
  /* makeWithVariables */makeWithVariables,
  /* ret_type */ret_type,
  /* MT_Ret */MT_Ret
];

var GetTracksQuery = ReasonApollo.CreateQuery([
      ppx_printed_query,
      parse
    ]);

var component = ReasonReact.reducerComponent("TodoApp");

function make$1() {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (param) {
              var send = param[/* send */3];
              var tracksQuery = make(10, /* () */0);
              return React.createElement("div", undefined, React.createElement("input", {
                              autoFocus: true,
                              placeholder: "What to do?",
                              type: "text",
                              value: param[/* state */1][/* newTodo */1],
                              onKeyDown: (function ($$event) {
                                  if ($$event.keyCode === 13) {
                                    $$event.preventDefault();
                                    return Curry._1(send, /* AddTodo */0);
                                  } else {
                                    return 0;
                                  }
                                }),
                              onChange: (function ($$event) {
                                  return Curry._1(send, /* ChangeTodo */Block.__(0, [$$event.target.value]));
                                })
                            }), React.createElement("button", {
                              onClick: (function () {
                                  return Curry._1(send, /* AddTodo */0);
                                })
                            }, "Add Todo"), ReasonReact.element(undefined, undefined, Curry.app(GetTracksQuery[/* make */3], [
                                  Js_primitive.some(tracksQuery.variables),
                                  undefined,
                                  undefined,
                                  undefined,
                                  undefined,
                                  undefined,
                                  undefined,
                                  undefined,
                                  undefined,
                                  (function (param) {
                                      var result = param[/* result */0];
                                      if (typeof result === "number") {
                                        return React.createElement("div", undefined, "Loading");
                                      } else if (result.tag) {
                                        var match = result[0].tracks;
                                        if (match !== undefined) {
                                          var arr = $$Array.map((function () {
                                                  return React.createElement("div", undefined, "track##name", React.createElement("br", undefined), React.createElement("p", undefined, "ID: track##id"));
                                                }), match);
                                          return React.createElement("div", undefined, arr);
                                        } else {
                                          return "No Track Data";
                                        }
                                      } else {
                                        return React.createElement("div", undefined, result[0].message);
                                      }
                                    })
                                ])));
            }),
          /* initialState */(function () {
              return /* record */[
                      /* todos : :: */[
                        /* record */[
                          /* id */"0",
                          /* title */"Write this ReasonReact app",
                          /* completed */false
                        ],
                        /* [] */0
                      ],
                      /* newTodo */"",
                      /* tracks : [] */0
                    ];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (typeof action === "number") {
                var nextId = String(List.length(state[/* todos */0]) + 1 | 0);
                var title = $$String.trim(state[/* newTodo */1]);
                var todos = Pervasives.$at(state[/* todos */0], /* :: */[
                      /* record */[
                        /* id */nextId,
                        /* title */title,
                        /* completed */false
                      ],
                      /* [] */0
                    ]);
                return /* Update */Block.__(0, [/* record */[
                            /* todos */todos,
                            /* newTodo */"",
                            /* tracks */state[/* tracks */2]
                          ]]);
              } else if (action.tag) {
                var todoToToggle = action[0];
                var todos$1 = List.map((function (todo) {
                        var match = Caml_obj.caml_equal(todo, todoToToggle);
                        if (match) {
                          return /* record */[
                                  /* id */todo[/* id */0],
                                  /* title */todo[/* title */1],
                                  /* completed */!todo[/* completed */2]
                                ];
                        } else {
                          return todo;
                        }
                      }), state[/* todos */0]);
                return /* Update */Block.__(0, [/* record */[
                            /* todos */todos$1,
                            /* newTodo */state[/* newTodo */1],
                            /* tracks */state[/* tracks */2]
                          ]]);
              } else {
                return /* Update */Block.__(0, [/* record */[
                            /* todos */state[/* todos */0],
                            /* newTodo */action[0],
                            /* tracks */state[/* tracks */2]
                          ]]);
              }
            }),
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.str = str;
exports.GetTracks = GetTracks;
exports.GetTracksQuery = GetTracksQuery;
exports.component = component;
exports.make = make$1;
/* GetTracksQuery Not a pure module */
