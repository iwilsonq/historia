// Generated by BUCKLESCRIPT VERSION 4.0.3, PLEASE EDIT WITH CARE
'use strict';

var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var ReasonApollo = require("reason-apollo/src/ReasonApollo.bs.js");

var ppx_printed_query = "query GetTracks($limit: Int)  {\ntracks(limit: $limit)  {\nid  \nname  \nurl  \ncoverArt  \n}\n\n}\n";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_primitive.valFromOption(match)["tracks"];
    var tmp;
    if (match$1 !== undefined) {
      var match$2 = Js_json.decodeArray(match$1);
      tmp = match$2 !== undefined ? match$2.map((function (value) {
                var match = Js_json.decodeObject(value);
                if (match !== undefined) {
                  var value$1 = Js_primitive.valFromOption(match);
                  var match$1 = value$1["id"];
                  var tmp;
                  if (match$1 !== undefined) {
                    var match$2 = Js_json.decodeString(match$1);
                    tmp = match$2 !== undefined ? match$2 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(match$1));
                  } else {
                    tmp = Js_exn.raiseError("graphql_ppx: Field id on type Track is missing");
                  }
                  var match$3 = value$1["name"];
                  var tmp$1;
                  if (match$3 !== undefined) {
                    var match$4 = Js_json.decodeString(match$3);
                    tmp$1 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(match$3));
                  } else {
                    tmp$1 = Js_exn.raiseError("graphql_ppx: Field name on type Track is missing");
                  }
                  var match$5 = value$1["url"];
                  var tmp$2;
                  if (match$5 !== undefined) {
                    var match$6 = Js_json.decodeString(match$5);
                    tmp$2 = match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(match$5));
                  } else {
                    tmp$2 = Js_exn.raiseError("graphql_ppx: Field url on type Track is missing");
                  }
                  var match$7 = value$1["coverArt"];
                  var tmp$3;
                  if (match$7 !== undefined) {
                    var match$8 = Js_json.decodeString(match$7);
                    tmp$3 = match$8 !== undefined ? match$8 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(match$7));
                  } else {
                    tmp$3 = Js_exn.raiseError("graphql_ppx: Field coverArt on type Track is missing");
                  }
                  return {
                          id: tmp,
                          name: tmp$1,
                          url: tmp$2,
                          coverArt: tmp$3
                        };
                } else {
                  return Js_exn.raiseError("graphql_ppx: Object is not a value");
                }
              })) : Js_exn.raiseError("graphql_ppx: Expected array, got " + JSON.stringify(match$1));
    } else {
      tmp = Js_exn.raiseError("graphql_ppx: Field tracks on type Query is missing");
    }
    return {
            tracks: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make(limit, _) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                  "limit",
                  limit !== undefined ? limit : null
                ]]),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var limit = variables.limit;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                  "limit",
                  limit !== undefined ? limit : null
                ]]),
          parse: parse
        };
}

function ret_type() {
  return /* module */[];
}

var MT_Ret = /* module */[];

var GetTracks = /* module */[
  /* ppx_printed_query */ppx_printed_query,
  /* query */ppx_printed_query,
  /* parse */parse,
  /* make */make,
  /* makeWithVariables */makeWithVariables,
  /* ret_type */ret_type,
  /* MT_Ret */MT_Ret
];

var GetTracksQuery = ReasonApollo.CreateQuery([
      ppx_printed_query,
      parse
    ]);

exports.GetTracks = GetTracks;
exports.GetTracksQuery = GetTracksQuery;
/* GetTracksQuery Not a pure module */
